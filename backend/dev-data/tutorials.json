[
    {
        "tutorialTitle":"Introduction to Programming",
        "content":"Today, we use computers in almost every part of our life. Think about some of the different ways that people use computers. In school, students use computers for tasks such as writing papers, searching for articles, sending email, and participating in online classes etc. At work, people use computers to analyze data, make presentations, conduct business transactions etc. At home, people use computers for tasks such as paying bills, shopping online, communicating with friends and family, playing computer games etc. Also our cell phone, microwave ovens, refrigerators, washing machines and other equipment’s are all using computers in direct or indirect forms. The uses of computers are almost limitless in our everyday lives.\nComputers can do such a wide variety of things because they can be programmed. This means that computers are not designed to do just one job, but to do any job that their programs tell them to do. A program is a set of instructions that a computer follows to perform a task. We all are familiar with word processing software’s like Microsoft word, open office documents etc. These are word processing programs those allows you to create, edit, and print documents with your computer. Programs are commonly referred to as software. Software is essential to a computer because it controls everything the computer does. All of the software that we use to make our computers useful is created by individuals working as programmers or software developers. A programmer, or software developer, is a person with the training and skills necessary to design, create, and test computer programs. Computer programming is an exciting and rewarding career.\nPrograms that make a computer useful for everyday tasks are known as application software. These are the programs that people normally spend most of their time running on their computers. A computer will store the data and instructions in its memory. Computer memory is organized as the collection of bits. Bit is the smallest part of memory which can store two situations called on or off. Memory is generally managed by bytes (Where a byte is a combination of 8 bits). A computer’s CPU can only understand instructions that are written in machine language. Because people find it very difficult to write entire programs in machine language, other programming languages have been invented.\nThe CPU is an electronic device that is designed to do specific things. In particular, the CPU is designed to perform operations such as the following:\nReading a piece of data from main memory\n• Adding two numbers\n• Subtracting one number from another number\n• Multiplying two numbers\n• Dividing one number by another number\n• Moving a piece of data from one memory location to another\n• Determining whether one value is equal to another value\nAs you can see from this list, the CPU performs simple operations on pieces of data. The CPU does nothing on its own, however. It has to be told what to do, and that’s the purpose of a program. A program is nothing more than a list of instructions that cause the CPU to perform operations. Each instruction in a program is a command that tells the CPU to perform a specific operation. To a CPU, however, an instruction to perform an operation is written in 0s and 1s because CPUs only understand instructions that are written in machine language and machine language instructions always have an underlying binary structure.\nAlthough a computer’s CPU only understands machine language, it is impractical for people to write programs in machine language. For this reason, assembly language was created in the early days of computing as an alternative to machine language. Instead of using binary numbers for instructions, assembly language uses short words that are known as mnemonics. For example, in assembly language, the mnemonic add typically means to add numbers, mul typically means to multiply numbers, and mov typically means to move a value to a location in memory. When a programmer uses assembly language to write a program, he or she can write short mnemonics instead of binary numbers.\nAlthough assembly language makes it unnecessary to write binary machine language instructions, it is not without difficulties. Assembly language is primarily a direct substitute for machine language, and like machine language, it requires that you know a lot about the CPU. Assembly language also requires that you write a large number of instructions for even the simplest program. Because assembly language is so close in nature to machine language, it is referred to as a low-level language.\nSo, a new generation of programming languages known as high-level languages began to appear. A high-level language allows you to create powerful and complex programs without knowing how the CPU works, and without writing large numbers of low-level instructions. In addition, most high-level languages use words that are easy to understand.\nEach high-level language has its own set of predefined words that the programmer must use to write a program. The words that make up a high-level programming language are known as keywords or reserved words. Each keyword has a specific meaning, and cannot be used for any other purpose.\nBecause the CPU understands only machine language instructions, programs that are written in a high-level language must be translated into machine language. Depending on the language that a program has been written in, the programmer will use either a compiler or an interpreter to make the translation. A compiler is a program that translates a high-level language program into a separate machine language program. The machine language program can then be executed any time it is needed."
    },
    {
        "tutorialTitle":"First Program in C Language",
        "content":"C is a programming language developed at AT & T’s Bell Laboratories of USA in 1972. It was designed and written by a man named Dennis Ritchie. In the late seventies C began to replace the more familiar languages of that time. Possibly why C seems so popular is because it is reliable, simple and easy to use. Communicating with a computer involves speaking the language the computer understands, which immediately rules out English as the language of communication with computer. However, there is a close analogy between learning English language and learning C language. The classical method of learning English is to first learn the alphabets used in the language, then learn to combine these alphabets to form words, which in turn are combined to form sentences and sentences are combined to form paragraphs. Learning C is similar and easier. Instead of straight-away learning how to write programs, we must first know what alphabets, numbers and special symbols are used in C, then how using them constants, variables and keywords are constructed, and finally how are these combined to form an instruction.\nBut, before digging these topics deeper, we have to take a short look on a sample program in C, how it looks like. What are the general components and how it will work to get familiar with programming in C, all these can be seen from below program which prints “Hello World!” on screen.\n#$codes[0]#$\nThis is a sample program to print a simple message on screen. The first line is a general command to include an already created file “stdio.h” which contains standard Input-Output functions like printf() used in the program. So that programmers need not to worry about hardware, he can more focus on writing programs. Second line is the main() function (in other words, the main gate of home) from where the CPU will start executing the program. The curly braces are used to define the set of statements which are part of a single block. printf() is a function provided by C library, which is used to print something on screen. last line is used to return back or end the program. // is used to comment a line in program. Comment does not make any sense for compiler. Compiler just ignores the comments written. These are written just for programmer reading references which makes the program much easier to understand and maintain for a long time. To write a short single line comment we use double slash //. Everything after // in that line is treated as a comment. If a particular potion needs to be comments, we generally use /* to start comment and */ to end comment. This is an multi line comment. Everything between these /* and */ is completely ignored by compiler while compiling the program.\nAfter writing your program you must compile it before executing. We can compile the programs using compilers, there are a lot of compilers for C language today like Turbo C, gcc etc. gcc (GNU Compiler Collection) is the most popular compiler now a days. It is free and open source so you can download and use it freely.",
        "codes":["#include<stdio.h>\nint main()\n{\nprintf(\"Hello World!\");\n// This is a comment. Above line will just print Hello World! On screen.\nreturn 0;\n/* This is an example of multi-line comment, instead of one line you can also write multi-line comments which generally used to provide readability of code.\nThese must start end with proper constructs as shown here. */\n}"]
    }
]
[
    {
        "tutorialTitle":"Introduction to Programming",
        "content":"Today%2C%20we%20use%20computers%20in%20almost%20every%20part%20of%20our%20life.%20Think%20about%20some%20of%20the%20different%20ways%20that%20people%20use%20computers.%20In%20school%2C%20students%20use%20computers%20for%20tasks%20such%20as%20writing%20papers%2C%20searching%20for%20articles%2C%20sending%20email%2C%20and%20participating%20in%20online%20classes%20etc.%20At%20work%2C%20people%20use%20computers%20to%20analyze%20data%2C%20make%20presentations%2C%20conduct%20business%20transactions%20etc.%20At%20home%2C%20people%20use%20computers%20for%20tasks%20such%20as%20paying%20bills%2C%20shopping%20online%2C%20communicating%20with%20friends%20and%20family%2C%20playing%20computer%20games%20etc.%20Also%20our%20cell%20phone%2C%20microwave%20ovens%2C%20refrigerators%2C%20washing%20machines%20and%20other%20equipment%E2%80%99s%20are%20all%20using%20computers%20in%20direct%20or%20indirect%20forms.%20The%20uses%20of%20computers%20are%20almost%20limitless%20in%20our%20everyday%20lives.%0A%0AComputers%20can%20do%20such%20a%20wide%20variety%20of%20things%20because%20they%20can%20be%20programmed.%20This%20means%20that%20computers%20are%20not%20designed%20to%20do%20just%20one%20job%2C%20but%20to%20do%20any%20job%20that%20their%20programs%20tell%20them%20to%20do.%20A%20program%20is%20a%20set%20of%20instructions%20that%20a%20computer%20follows%20to%20perform%20a%20task.%20We%20all%20are%20familiar%20with%20word%20processing%20software%E2%80%99s%20like%20Microsoft%20word%2C%20open%20office%20documents%20etc.%20These%20are%20word%20processing%20programs%20those%20allows%20you%20to%20create%2C%20edit%2C%20and%20print%20documents%20with%20your%20computer.%20Programs%20are%20commonly%20referred%20to%20as%20software.%20Software%20is%20essential%20to%20a%20computer%20because%20it%20controls%20everything%20the%20computer%20does.%20All%20of%20the%20software%20that%20we%20use%20to%20make%20our%20computers%20useful%20is%20created%20by%20individuals%20working%20as%20programmers%20or%20software%20developers.%20A%20programmer%2C%20or%20software%20developer%2C%20is%20a%20person%20with%20the%20training%20and%20skills%20necessary%20to%20design%2C%20create%2C%20and%20test%20computer%20programs.%20Computer%20programming%20is%20an%20exciting%20and%20rewarding%20career.%0A%0APrograms%20that%20make%20a%20computer%20useful%20for%20everyday%20tasks%20are%20known%20as%20application%20software.%20These%20are%20the%20programs%20that%20people%20normally%20spend%20most%20of%20their%20time%20running%20on%20their%20computers.%20A%20computer%20will%20store%20the%20data%20and%20instructions%20in%20its%20memory.%20Computer%20memory%20is%20organized%20as%20the%20collection%20of%20bits.%20Bit%20is%20the%20smallest%20part%20of%20memory%20which%20can%20store%20two%20situations%20called%20on%20or%20off.%20Memory%20is%20generally%20managed%20by%20bytes%20(Where%20a%20byte%20is%20a%20combination%20of%208%20bits).%20A%20computer%E2%80%99s%20CPU%20can%20only%20understand%20instructions%20that%20are%20written%20in%20machine%20language.%20Because%20people%20find%20it%20very%20difficult%20to%20write%20entire%20programs%20in%20machine%20language%2C%20other%20programming%20languages%20have%20been%20invented.%0A%0AThe%20CPU%20is%20an%20electronic%20device%20that%20is%20designed%20to%20do%20specific%20things.%20In%20particular%2C%20the%20CPU%20is%20designed%20to%20perform%20operations%20such%20as%20the%20following%3A%0A%0AReading%20a%20piece%20of%20data%20from%20main%20memory%0A%0AAdding%20two%20numbers%0A%0ASubtracting%20one%20number%20from%20another%20number%0A%0AMultiplying%20two%20numbers%0A%0ADividing%20one%20number%20by%20another%20number%0A%0AMoving%20a%20piece%20of%20data%20from%20one%20memory%20location%20to%20another%0A%0ADetermining%20whether%20one%20value%20is%20equal%20to%20another%20value%0A%0AAs%20you%20can%20see%20from%20this%20list%2C%20the%20CPU%20performs%20simple%20operations%20on%20pieces%20of%20data.%20The%20CPU%20does%20nothing%20on%20its%20own%2C%20however.%20It%20has%20to%20be%20told%20what%20to%20do%2C%20and%20that%E2%80%99s%20the%20purpose%20of%20a%20program.%20A%20program%20is%20nothing%20more%20than%20a%20list%20of%20instructions%20that%20cause%20the%20CPU%20to%20perform%20operations.%20Each%20instruction%20in%20a%20program%20is%20a%20command%20that%20tells%20the%20CPU%20to%20perform%20a%20specific%20operation.%20To%20a%20CPU%2C%20however%2C%20an%20instruction%20to%20perform%20an%20operation%20is%20written%20in%200s%20and%201s%20because%20CPUs%20only%20understand%20instructions%20that%20are%20written%20in%20machine%20language%20and%20machine%20language%20instructions%20always%20have%20an%20underlying%20binary%20structure.%0A%0AAlthough%20a%20computer%E2%80%99s%20CPU%20only%20understands%20machine%20language%2C%20it%20is%20impractical%20for%20people%20to%20write%20programs%20in%20machine%20language.%20For%20this%20reason%2C%20assembly%20language%20was%20created%20in%20the%20early%20days%20of%20computing%20as%20an%20alternative%20to%20machine%20language.%20Instead%20of%20using%20binary%20numbers%20for%20instructions%2C%20assembly%20language%20uses%20short%20words%20that%20are%20known%20as%20mnemonics.%20For%20example%2C%20in%20assembly%20language%2C%20the%20mnemonic%20add%20typically%20means%20to%20add%20numbers%2C%20mul%20typically%20means%20to%20multiply%20numbers%2C%20and%20mov%20typically%20means%20to%20move%20a%20value%20to%20a%20location%20in%20memory.%20When%20a%20programmer%20uses%20assembly%20language%20to%20write%20a%20program%2C%20he%20or%20she%20can%20write%20short%20mnemonics%20instead%20of%20binary%20numbers.%0A%0AAlthough%20assembly%20language%20makes%20it%20unnecessary%20to%20write%20binary%20machine%20language%20instructions%2C%20it%20is%20not%20without%20difficulties.%20Assembly%20language%20is%20primarily%20a%20direct%20substitute%20for%20machine%20language%2C%20and%20like%20machine%20language%2C%20it%20requires%20that%20you%20know%20a%20lot%20about%20the%20CPU.%20Assembly%20language%20also%20requires%20that%20you%20write%20a%20large%20number%20of%20instructions%20for%20even%20the%20simplest%20program.%20Because%20assembly%20language%20is%20so%20close%20in%20nature%20to%20machine%20language%2C%20it%20is%20referred%20to%20as%20a%20low-level%20language.%0A%0ASo%2C%20a%20new%20generation%20of%20programming%20languages%20known%20as%20high-level%20languages%20began%20to%20appear.%20A%20high-level%20language%20allows%20you%20to%20create%20powerful%20and%20complex%20programs%20without%20knowing%20how%20the%20CPU%20works%2C%20and%20without%20writing%20large%20numbers%20of%20low-level%20instructions.%20In%20addition%2C%20most%20high-level%20languages%20use%20words%20that%20are%20easy%20to%20understand.%0A%0AEach%20high-level%20language%20has%20its%20own%20set%20of%20predefined%20words%20that%20the%20programmer%20must%20use%20to%20write%20a%20program.%20The%20words%20that%20make%20up%20a%20high-level%20programming%20language%20are%20known%20as%20keywords%20or%20reserved%20words.%20Each%20keyword%20has%20a%20specific%20meaning%2C%20and%20cannot%20be%20used%20for%20any%20other%20purpose.%0A%0ABecause%20the%20CPU%20understands%20only%20machine%20language%20instructions%2C%20programs%20that%20are%20written%20in%20a%20high-level%20language%20must%20be%20translated%20into%20machine%20language.%20Depending%20on%20the%20language%20that%20a%20program%20has%20been%20written%20in%2C%20the%20programmer%20will%20use%20either%20a%20compiler%20or%20an%20interpreter%20to%20make%20the%20translation.%20A%20compiler%20is%20a%20program%20that%20translates%20a%20high-level%20language%20program%20into%20a%20separate%20machine%20language%20program.%20The%20machine%20language%20program%20can%20then%20be%20executed%20any%20time%20it%20is%20needed."
    },
    {
        "tutorialTitle":"First Program in C Language",
        "content":"C%20is%20a%20programming%20language%20developed%20at%20AT%20%26%20T%E2%80%99s%20Bell%20Laboratories%20of%20USA%20in%201972.%20It%20was%20designed%20and%20written%20by%20a%20man%20named%20Dennis%20Ritchie.%20In%20the%20late%20seventies%20C%20began%20to%20replace%20the%20more%20familiar%20languages%20of%20that%20time.%20Possibly%20why%20C%20seems%20so%20popular%20is%20because%20it%20is%20reliable%2C%20simple%20and%20easy%20to%20use.%20Communicating%20with%20a%20computer%20involves%20speaking%20the%20language%20the%20computer%20understands%2C%20which%20immediately%20rules%20out%20English%20as%20the%20language%20of%20communication%20with%20computer.%20However%2C%20there%20is%20a%20close%20analogy%20between%20learning%20English%20language%20and%20learning%20C%20language.%20The%20classical%20method%20of%20learning%20English%20is%20to%20first%20learn%20the%20alphabets%20used%20in%20the%20language%2C%20then%20learn%20to%20combine%20these%20alphabets%20to%20form%20words%2C%20which%20in%20turn%20are%20combined%20to%20form%20sentences%20and%20sentences%20are%20combined%20to%20form%20paragraphs.%20Learning%20C%20is%20similar%20and%20easier.%20Instead%20of%20straight-away%20learning%20how%20to%20write%20programs%2C%20we%20must%20first%20know%20what%20alphabets%2C%20numbers%20and%20special%20symbols%20are%20used%20in%20C%2C%20then%20how%20using%20them%20constants%2C%20variables%20and%20keywords%20are%20constructed%2C%20and%20finally%20how%20are%20these%20combined%20to%20form%20an%20instruction.%0ABut%2C%20before%20digging%20these%20topics%20deeper%2C%20we%20have%20to%20take%20a%20short%20look%20on%20a%20sample%20program%20in%20C%2C%20how%20it%20looks%20like.%20What%20are%20the%20general%20components%20and%20how%20it%20will%20work%20to%20get%20familiar%20with%20programming%20in%20C%2C%20all%20these%20can%20be%20seen%20from%20below%20program%20which%20prints%20%E2%80%9CHello%20World!%E2%80%9D%20on%20screen.%0A%23%24codes%5B0%5D%23%24%0AThis%20is%20a%20sample%20program%20to%20print%20a%20simple%20message%20on%20screen.%20The%20first%20line%20is%20a%20general%20command%20to%20include%20an%20already%20created%20file%20%E2%80%9Cstdio.h%E2%80%9D%20which%20contains%20standard%20Input-Output%20functions%20like%20printf()%20used%20in%20the%20program.%20So%20that%20programmers%20need%20not%20to%20worry%20about%20hardware%2C%20he%20can%20more%20focus%20on%20writing%20programs.%20Second%20line%20is%20the%20main()%20function%20(in%20other%20words%2C%20the%20main%20gate%20of%20home)%20from%20where%20the%20CPU%20will%20start%20executing%20the%20program.%20The%20curly%20braces%20are%20used%20to%20define%20the%20set%20of%20statements%20which%20are%20part%20of%20a%20single%20block.%20printf()%20is%20a%20function%20provided%20by%20C%20library%2C%20which%20is%20used%20to%20print%20something%20on%20screen.%20last%20line%20is%20used%20to%20return%20back%20or%20end%20the%20program.%20%2F%2F%20is%20used%20to%20comment%20a%20line%20in%20program.%20Comment%20does%20not%20make%20any%20sense%20for%20compiler.%20Compiler%20just%20ignores%20the%20comments%20written.%20These%20are%20written%20just%20for%20programmer%20reading%20references%20which%20makes%20the%20program%20much%20easier%20to%20understand%20and%20maintain%20for%20a%20long%20time.%20To%20write%20a%20short%20single%20line%20comment%20we%20use%20double%20slash%20%2F%2F.%20Everything%20after%20%2F%2F%20in%20that%20line%20is%20treated%20as%20a%20comment.%20If%20a%20particular%20potion%20needs%20to%20be%20comments%2C%20we%20generally%20use%20%2F*%20to%20start%20comment%20and%20*%2F%20to%20end%20comment.%20This%20is%20an%20multi%20line%20comment.%20Everything%20between%20these%20%2F*%20and%20*%2F%20is%20completely%20ignored%20by%20compiler%20while%20compiling%20the%20program.%0AAfter%20writing%20your%20program%20you%20must%20compile%20it%20before%20executing.%20We%20can%20compile%20the%20programs%20using%20compilers%2C%20there%20are%20a%20lot%20of%20compilers%20for%20C%20language%20today%20like%20Turbo%20C%2C%20gcc%20etc.%20gcc%20(GNU%20Compiler%20Collection)%20is%20the%20most%20popular%20compiler%20now%20a%20days.%20It%20is%20free%20and%20open%20source%20so%20you%20can%20download%20and%20use%20it%20freely.",
        "codes":["%23include%3Cstdio.h%3E%0A%0Aint%20main()%0A%7B%0A%20%20printf(%22Hello%20World!%22)%3B%0A%20%20%2F%2F%20This%20is%20a%20comment.%20Above%20line%20will%20just%20print%20Hello%20World!%20On%20screen.%0A%20%20return%200%3B%0A%20%20%2F*%20This%20is%20an%20example%20of%20multi-line%20comment%2C%20%0A%20%20instead%20of%20one%20line%20you%20can%20also%20write%20multi-line%20comments%20which%20generally%20used%20to%20provide%20readability%20of%20code.%20%0A%20%20These%20must%20start%20end%20with%20proper%20constructs%20as%20shown%20here.%20*%2F%0A%7D"]
    },
    {
        "tutorialTitle":"Variables and Identifiers",
        "content":"In%20C%2FC%2B%2B%20programs%2C%20the%20most%20fundamental%20element%20is%20expression.%20Expression%20can%20be%20formed%20by%20mixing%20data%20and%20operators.%20Data%20can%20be%20represented%20by%20variables%2C%20constants%20etc.%20whereas%20operators%20are%20defined%20in%20every%20programming%20languages.%20C%2FC%2B%2B%20languages%20supports%20various%20data%20types.%20All%20these%20topics%20are%20explained%20below%3A%20-%0D%0A%0D%0A%0D%0A%0D%0AVariable%3A%20A%20variable%20is%20a%20named%20location%20in%20memory.%20It%20is%20used%20to%20hold%20a%20value%20during%20the%20execution%20of%20program.%20All%20variables%20needs%20to%20be%20declared%20before%20they%20used.%20Every%20variable%20has%20a%20specific%20data%20type%20associated%20with%20it.%20Which%20shows%20the%20type%20of%20data%20it%20can%20hold.%20To%20declare%20a%20variable%2C%20we%20can%20use%20as%20below%3A%0D%0A%0D%0A%0D%0A%0D%0Adata_type%20var_name%3B%0D%0A%0D%0A%0D%0Adata_type%20is%20a%20valid%20data%20type%20and%20modifier%20and%20var_name%20is%20the%20name%20of%20the%20variable%20declared.%0D%0A%0D%0A%0D%0A%0D%0AConstants%3A%20Constants%20refer%20to%20fixed%20values%20that%20the%20program%20may%20not%20alter.%20Constants%20can%20be%20of%20any%20of%20the%20basic%20data%20types.%20The%20way%20each%20constant%20is%20represented%20depends%20upon%20its%20type.%20Constants%20are%20also%20called%20literals.%0D%0A%0D%0ACharacter%20constants%20are%20enclosed%20between%20single%20quotes.%20For%20example%2C%20'a'%20and%20'%25'%20are%20both%20character%20constants.%20Integer%20constants%20are%20specified%20as%20numbers%20without%20fractional%20components.%20For%20example%2C%2010%20and%20%E2%80%93100%20are%20integer%20constants.%20Floating-point%20constants%20require%20the%20decimal%20point%20followed%20by%20the%20number's%20fractional%20component.%20For%20example%2C%2011.123%20is%20a%20floating-point%20constant.%20C%20also%20allows%20you%20to%20use%20scientific%20notation%20for%20floating-point%20numbers.%20For%20example%2C%0D%0A%23%24codes%5B0%5D%23%24%0D%0AWhen%20a%20constant%20value%20starts%20with%200%2C%20it%20is%20considered%20as%20octal%20number.%20So%20if%20we%20use%20as%2C%0D%0A%0D%0Aint%20a%20%3D%20070%3B%0D%0Aand%20then%20want%20to%20print%20the%20value%20of%20a%20in%20decimal%20it%20is%20not%2070%2C%20it%20is%20the%20decimal%20equivalent%20of%2070%20base%208%20which%20is%2056.%20Also%20following%20is%20a%20syntax%20error%2C%0D%0A%0D%0Aint%20a%20%3D%20078%3B%0D%0Aas%20you%20are%20writing%20an%20octal%20constant%2C%20but%20in%20octal%20only%20digits%20from%200%20to%207%20can%20be%20used%2C%20hence%208%20is%20not%20a%20valid%20digit%20in%20octal%20number%20system.%0D%0A%23%24codes%5B1%5D%23%24%0D%0AIdentifiers%3A%20In%20C%2FC%2B%2B%2C%20the%20names%20of%20variables%2C%20functions%2C%20labels%2C%20and%20various%20other%20user-defined%20items%20are%20called%20identifiers.%20The%20length%20of%20these%20identifiers%20can%20vary%20from%20one%20to%20several%20characters.%20The%20first%20character%20must%20be%20a%20letter%20or%20an%20underscore%2C%20and%20subsequent%20characters%20must%20be%20either%20letters%2C%20digits%2C%20or%20underscores.%20Here%20are%20some%20correct%20and%20incorrect%20identifier%20names%3A%0D%0A%0D%0A%0D%0A%0D%0ACorrect%20%3A%20employee_name%2C%20emp_phone%2C%20_empid%2C%20_number123%0D%0A%0D%0AIncorrect%20%3A%201empno%2C%20emp-number%2C%20first%26last%2C%20high..bal%0D%0A%0D%0A%0D%0A%0D%0AIn%20an%20identifier%2C%20upper%20and%20lowercase%20are%20treated%20as%20distinct.%20Hence%20count%2C%20Count%20and%20COUNT%20are%20three%20separate%20identifiers.",
        "codes":["%23include%20%3Cstdio.h%3E%0D%0A%0D%0Aint%20main()%0D%0A%7B%0D%0A%20%20char%20c%20%3D%20'A'%3B%20%20%20%20%20%20%20%20%2F%2F%20character%20constant%0D%0A%20%20int%20i%20%3D%2050%3B%20%20%20%20%20%20%20%20%2F%2F%20integer%20constant%0D%0A%20%20double%20%20%20%20df%20%3D%203.5%3B%20%20%20%20%2F%2F%20double%20constant%0D%0A%0D%0A%20%20printf(%22c%20%3D%20%25c%5Cn%22%2C%20c)%3B%0D%0A%20%20printf(%22i%20%3D%20%25d%5Cn%22%2C%20i)%3B%0D%0A%20%20printf(%22df%20%3D%20%25lf%5Cn%22%2C%20df)%3B%0D%0A%0D%0A%20%20return%200%3B%0D%0A%7D","%23include%20%3Cstdio.h%3E%0D%0Aint%20main()%0D%0A%7B%0D%0A%20%20int%20a%20%3D%20070%3B%0D%0A%20%20printf(%22a%20%3D%20%25d%22%2C%20a)%3B%0D%0A%0D%0A%20%20return%200%3B%0D%0A%7D"]
    },
    {
        "tutorialTitle":"C - Data types",
        "content":"C%20defines%20four%20basic%20primitive%20data%20types%3A%20character%2C%20integer%2C%20floating-point%2C%20valueless.%20These%20are%20declared%20using%20char%2C%20int%2C%20float%2C%20and%20void%20respectively.%20These%20data%20types%20will%20determine%20how%20much%20space%20will%20be%20allocated%20to%20a%20particular%20variable%20in%20memory%20of%20computer%20while%20executing%20a%20program.%20Also%2C%20they%20describe%20how%20to%20interpret%20the%20bits%20of%20a%20variable%2C%20while%20using%20them.%20As%20everything%20in%20memory%20is%20binary%20numbers.%20But%20depending%20on%20data%20type%20specifications%2C%20these%20binary%20numbers%20will%20be%20interpreted%20separately.%0D%0A%0D%0Achar%3A%20These%20variables%20take%201%20byte%20of%20memory.%0D%0A%0D%0Aint%3A%20These%20variables%20depend%20on%20the%20word%20size%20of%20the%20computer.%20So%2C%20generally%2C%20they%20take%2016-bits%20on%20old%2016-bit%20computers%2C%20whereas%20on%20modern%2032-bit%20and%2064-bit%20computers%20they%20consume%2032-bits%20of%20memory.%20you%20cannot%20make%20assumptions%20about%20the%20size%20of%20an%20integer%20if%20you%20want%20your%20programs%20to%20be%20portable%20to%20the%20widest%20range%20of%20environments.%0D%0A%0D%0Afloat%3A%20They%20are%20also%20depend%20on%20implementation.%20Floating%20point%20number%20can%20be%20single-precision%20or%20double-precision.%20Both%20these%20will%20be%20represented%20by%20float%20and%20double%20keywords%20respectively.%0D%0A%0D%0Avoid%3A%20It%20is%20generally%20used%20to%20declare%20a%20function%20returning%20no%20value.%0D%0A%0D%0A%0D%0A%0D%0AWe%20also%20have%20four%20modifiers%20to%20these%20data%20types%3A%20signed%2C%20unsigned%2C%20long%2C%20short.%20Signed%20and%20unsigned%20are%20related%20to%20negative%20numbers%20handling.%20Long%20and%20short%20are%20related%20to%20use%20of%20short%20length%20or%20long%20length%20of%20bits%20for%20a%20variable.%20The%20int%20base%20type%20can%20be%20modified%20by%20signed%2C%20short%2C%20long%2C%20and%20unsigned.%20The%20char%20type%20can%20be%20modified%20by%20unsigned%20and%20signed.%20You%20may%20also%20apply%20long%20to%20double.%0D%0A%0D%0A%0D%0A%0D%0AIf%20a%20variable%20takes%208-bits%20in%20memory%2C%20it%20can%20take%20all%20bits%20from%200000%200000%20to%20all%20bits%201111%201111%2C%20making%20total%20of%20256%20combinations.%20Which%20results%20in%20range%20of%20this%20variable.%20Now%20either%20this%20range%20can%20hold%20half%20negative%20and%20half%20positive%20numbers%20or%20it%20can%20hold%20all%20positive%20numbers.%20So%20an%208-bit%20signed%20variable%20may%20hold%20-128%20to%20127%20values.%20Which%20is%20-2%5E7%20to%202%5E7%20-1%20values.%20So%20in%20general%20if%20a%20variable%20takes%20n-bits%20in%20memory%2C%20then%20its%20signed%20representsation%20will%20take%20-2%5E(n-1)%20to%20%2B2%5E(n-1)-1%20values%2C%20and%20its%20unsigned%20representation%20may%20take%200%20to%202%5E(n)-1%20values.%0D%0A%0D%0A%0D%0A%0D%0ASo%20all%20these%20can%20be%20combined%20and%20we%20can%20declare%20some%20variables%20as%20below%3A%20-%0D%0A%23%24codes%5B0%5D%23%24%0D%0AIn%20C%2C%20there%20is%20a%20rule%20called%20'implicit%20int'.%20Which%20says%2C%20in%20most%20cases%20if%20something%20is%20missing%20in%20statement%2C%20the%20C%20compiler%20presumes%20an%20int%20there.%20Although%20it%20is%20not%20a%20good%20practice%20to%20believe%20on%20it.%20We%20need%20to%20explicitly%20specify%20everything.%20Following%20are%20some%20equivalent%20declarations%3A%20-%0D%0A%0D%0Asigned%20%20%20%20%20%3D%20signed%20int%0D%0Aunsigned%20%20%20%3D%20unsigned%20int%0D%0Along%20%20%20%20%20%20%20%3D%20long%20int%0D%0Ashort%20%20%20%20%20%20%3D%20short%20int%0D%0A%0D%0A%0D%0AType%20Qualifiers%3A%20In%20C%2C%20we%20have%20two%20type%20qualifiers%2C%20which%20can%20allows%20us%20to%20control%20the%20variables%3A%20const%20and%20volatile.%0D%0A%0D%0AVariables%20of%20type%20const%20may%20not%20be%20changed%20by%20program.%20They%20may%20be%20assigned%20an%20initial%20value%20only%20during%20declaration.%20For%20example%2C%0D%0A%0D%0A%0D%0A%0D%0Aconst%20int%20i%3D10%3B%20%20%20%20%20%20%2F%2F%20I%20is%20an%20constant%20integer.%0D%0Ai%20%3D%2020%3B%20%20%20%20%20%20%20%20%20%2F%2F%20It%20will%20be%20a%20error.%0D%0A%0D%0A%0D%0Avolatile%20tells%20the%20compiler%20that%20the%20value%20of%20a%20variable%20may%20change%20outside%20of%20the%20program%20also%2C%20due%20to%20some%20external%20activity.%0D%0A%0D%0A%0D%0A%EF%BB%BF",
        "codes":["%23include%20%3Cstdio.h%3E%0D%0A%0D%0Aint%20main()%0D%0A%7B%0D%0A%20%20char%20c%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20c%20is%20a%20character%20variable%20of%208%20bits.%20May%20hold%20value%20from%20-128%20to%20127.%0D%0A%20%20signed%20char%20c1%3B%20%20%20%20%20%20%20%20%20%2F%2F%20c%20is%20a%20character%20variable%20of%208%20bits.%20May%20hold%20value%20from%20-128%20to%20127.%0D%0A%20%20unsigned%20char%20c2%3B%20%20%20%20%2F%2F%20c%20is%20a%20character%20variable%20of%208%20bits.%20May%20hold%20value%20from%200%20to%20255.%0D%0A%20%20int%20i%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20i%20is%20a%20integer%20variable%20of%2016%2F32%20bits.%20%0D%0A%20%20short%20int%20j%3B%20%20%20%20%20%20%20%20%2F%2F%20i%20will%20be%20short%20integer%20of%2016-bits.%20%0D%0A%20%20long%20int%20li%3B%20%20%20%20%20%20%20%20%2F%2F%20li%20is%20a%20long%20int%20variable%2C%20taking%2032-bits.%0D%0A%20%20float%20f%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20f%20is%20single-precision%20floating%20number%20taking%2032-bits%0D%0A%20%20double%20%20%20%20df%3B%20%20%20%20%20%20%20%20%2F%2F%20df%20is%20double-precision%20floating%20number%20taking%2064-bits%0D%0A%20%20long%20double%20ldf%3B%20%20%20%20%2F%2F%20ldf%20is%20double-precision%20floating%20number%20taking%2080-bits%20(Largest%20in%20size).%0D%0A%0D%0A%20%20printf(%22i%20%3D%20%25d%5Cn%22%2C%20i)%3B%0D%0A%20%20%0D%0A%20%20return%200%3B%0D%0A%7D"]
    }
]